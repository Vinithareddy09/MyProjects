import sys
MAX_NODES = 100
INFINITY = sys.maxsize
# Function to find the node with the minimum distance value, from the set of nodes not yet processed
def min_distance(dist, visited, n):
    min_val = INFINITY
    min_index = -1
    for v in range(n):
        if not visited[v] and dist[v] <= min_val:
            min_val = dist[v]
            min_index = v
    return min_index
# Dijkstra's algorithm for finding the shortest path in a graph
def dijkstra(graph, src, n):
    dist = [INFINITY] * n  # The output array to hold shortest distances from src
    visited = [False] * n  # visited[] will be True if node i is included in the shortest path tree
    # Initialize distance of source as 0
    dist[src] = 0
    # Find shortest path for all nodes
    for _ in range(n - 1):
        u = min_distance(dist, visited, n)
        visited[u] = True
        # Update dist value of the adjacent nodes of the picked node
        for v in range(n):
            if not visited[v] and graph[u][v] and dist[u] != INFINITY and dist[u] + graph[u][v] < dist[v]:
                dist[v] = dist[u] + graph[u][v]
  # Print the calculated shortest distances
    print("Node\tDistance from Source")
    for i in range(n):
        print(f"{i}\t{dist[i]}")
# Main function
if __name__ == "__main__":
    n = int(input("Enter number of nodes in the network: "))
    # Initialize graph as a 2D list
    graph = []
    print("Enter the adjacency matrix (use 0 for no direct path):")
    for i in range(n):
        row = list(map(int, input().split()))
        graph.append(row)
    src = int(input("Enter the source node: "))
    dijkstra(graph, src, n)
